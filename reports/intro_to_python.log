Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# TEST CODE (run this code to test you solution)

def random_list(n=10, min=0.0, max=100.0):
    """Returns a list of length `n` of random floats between `min` and `max`."""
    import random
    values = []
    for i in range(n):
        r = random.random()
        value = min + r*(max-min)
        values.append(value)
    return values


def test_compute_mean(function):
    """
    Run a few lists to check if value returned by `function` matches expected.
    """
    import math, statistics
    assert function([1,1,1]) == 1
    assert function([61,72,85,92]) == 77.5
    list10 = random_list(n=10)
    assert math.isclose(function(list10), statistics.mean(list10))
    list100 = random_list(n=100)
    assert math.isclose(function(list100), statistics.mean(list100))
    print("All tests passed. Good job y'all!")


# RUN TESTS
test_compute_mean(compute_mean)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [44][0m, in [0;36m<cell line: 29>[0;34m()[0m
[1;32m     25[0m     [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mAll tests passed. Good job y[39m[38;5;124m'[39m[38;5;124mall![39m[38;5;124m"[39m)
[1;32m     28[0m [38;5;66;03m# RUN TESTS[39;00m
[0;32m---> 29[0m test_compute_mean([43mcompute_mean[49m)

[0;31mNameError[0m: name 'compute_mean' is not defined
NameError: name 'compute_mean' is not defined

